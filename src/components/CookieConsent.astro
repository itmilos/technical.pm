---
import { Cookies } from '../utils/cookies';
---

<!-- Cookie Consent Banner -->
<div id="cookie-consent" class="fixed bottom-0 left-0 right-0 glass-primary border-t transform translate-y-full transition-transform duration-300 ease-in-out z-40">
  <div class="max-w-7xl mx-auto p-4 sm:px-6 lg:px-8">
    <div class="flex flex-col sm:flex-row items-center justify-between gap-4">
      <div class="flex-1">
        <h3 class="text-lg font-semibold text-pale-blush-50">Cookie Preferences</h3>
        <p class="mt-1 text-sm">
          We use cookies to enhance your browsing experience, serve personalized content, and analyze our traffic. 
          <br>By clicking "Accept All", you consent to our use of cookies.
        </p>
      </div>
      <div class="flex flex-col sm:flex-row gap-3">
        
        <button
          id="cookie-consent-customize"
         class="inline-block px-6 sm:px-8 py-3 font-semibold rounded-lg shadow transition-all duration-300 hover:scale-105 hover:shadow-lg active:scale-95 group text-sm sm:text-base"
        style="background: var(--accent-primary); color: white;"
        >
          Customize
        </button>
        <button
          id="cookie-consent-accept"
         class="inline-block px-6 sm:px-8 py-3 font-semibold rounded-lg shadow transition-all duration-300 hover:scale-105 hover:shadow-lg active:scale-95 group text-sm sm:text-base"
        style="background: var(--accent-primary); color: white;"
        >
          Accept All
        </button>
      </div>
    </div>
  </div>
</div>

<!-- Cookie Preferences Modal - Moved outside the banner -->
<div id="cookie-preferences" class="hidden fixed inset-0 backdrop-blur-sm transition-opacity z-[100] bg-primary">
  <div class="fixed inset-0 z-[101] overflow-y-auto custom-scrollbar">
    <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
      <div class="glass-modal relative transform overflow-hidden rounded-lg px-4 pb-4 pt-5 text-left transition-all sm:my-8 sm:w-full sm:max-w-lg sm:p-6 bg-secondary text-primary">
        <div class="absolute right-0 top-0 pr-4 pt-4">
          <button
            type="button"
            id="cookie-preferences-close"
            class="rounded-md focus:outline-none focus:ring-2 focus:ring-royal-purple-500 focus:ring-offset-2 bg-tertiary text-tertiary z-50"
          >
            <span class="sr-only">Close</span>
            <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
            </svg>
          </button>
        </div>

        <div class="sm:flex sm:items-start">
          <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
            <h3 class="text-lg font-semibold leading-6 text-primary">Cookie Preferences</h3>
            <div class="mt-4 space-y-4">
              <div class="flex items-start">
                <div class="animated-checkbox-wrapper">
                  <input
                    id="cookie-essential"
                    type="checkbox"
                    checked
                    disabled
                    class="animated-checkbox"
                  />
                  <label for="cookie-essential" class="checkbox-label">
                    <span class="checkbox-custom">
                      <svg class="checkbox-icon" width="12" height="12" viewBox="0 0 12 12" fill="none">
                        <path d="M10 3L4.5 8.5L2 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    </span>
                  </label>
                </div>
                <div class="ml-4">
                  <label for="cookie-essential" class="font-medium font-primary cursor-pointer text-primary">Essential Cookies ðŸ”’</label>
                  <p class="text-sm font-primary text-tertiary">Required for the website to function properly. Cannot be disabled.</p>
                </div>
              </div>

              <div class="flex items-start">
                <div class="animated-checkbox-wrapper">
                  <input
                    id="cookie-analytics"
                    type="checkbox"
                    class="animated-checkbox"
                  />
                  <label for="cookie-analytics" class="checkbox-label">
                    <span class="checkbox-custom">
                      <svg class="checkbox-icon" width="12" height="12" viewBox="0 0 12 12" fill="none">
                        <path d="M10 3L4.5 8.5L2 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    </span>
                  </label>
                </div>
                <div class="ml-4">
                  <label for="cookie-analytics" class="font-medium font-primary cursor-pointer text-primary">Analytics Cookies ðŸ“Š</label>
                  <p class="text-sm font-primary text-tertiary">Help us understand how visitors interact with our website.</p>
                </div>
              </div>

              <div class="flex items-start">
                <div class="animated-checkbox-wrapper">
                  <input
                    id="cookie-marketing"
                    type="checkbox"
                    class="animated-checkbox"
                  />
                  <label for="cookie-marketing" class="checkbox-label">
                    <span class="checkbox-custom">
                      <svg class="checkbox-icon" width="12" height="12" viewBox="0 0 12 12" fill="none">
                        <path d="M10 3L4.5 8.5L2 6" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                      </svg>
                    </span>
                  </label>
                </div>
                <div class="ml-4">
                  <label for="cookie-marketing" class="font-medium font-primary cursor-pointer text-primary">Marketing Cookies ðŸŽ¯</label>
                  <p class="text-sm font-primary text-tertiary">Used to track visitors across websites for marketing purposes.</p>
                </div>
              </div>
            </div>

            <div class="mt-6 flex justify-end gap-3">
              <button
                type="button"
                id="cookie-preferences-save"
                 class="inline-block px-6 sm:px-8 py-3 font-semibold rounded-lg shadow transition-all duration-300 hover:scale-105 hover:shadow-lg active:scale-95 group text-sm sm:text-base z-50"
        style="background: var(--accent-primary); color: white;"
              >
                Save Preferences
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<script>
  import { Cookies } from '../utils/cookies';

  const COOKIE_CONSENT_KEY = 'cookie_consent';
  const COOKIE_PREFERENCES_KEY = 'cookie_preferences';

  // Initialize cookie consent
  const initCookieConsent = () => {
    const consent = Cookies.get(COOKIE_CONSENT_KEY);
    const preferences = Cookies.get(COOKIE_PREFERENCES_KEY);
    
    if (!consent) {
      showCookieConsent();
    } else if (preferences) {
      applyCookiePreferences(JSON.parse(preferences));
    }
  };

  // Show cookie consent banner
  const showCookieConsent = () => {
    const banner = document.getElementById('cookie-consent');
    if (banner) {
      banner.classList.remove('translate-y-full');
    }
  };

  // Hide cookie consent banner
  const hideCookieConsent = () => {
    const banner = document.getElementById('cookie-consent');
    if (banner) {
      banner.classList.add('translate-y-full');
    }
  };

  // Show cookie preferences modal
  const showCookiePreferences = () => {
    const modal = document.getElementById('cookie-preferences');
    if (modal) {
      modal.classList.remove('hidden');
    }
  };

  // Hide cookie preferences modal
  const hideCookiePreferences = () => {
    const modal = document.getElementById('cookie-preferences');
    if (modal) {
      modal.classList.add('hidden');
    }
  };

  // Apply cookie preferences
  const applyCookiePreferences = (preferences: Record<string, boolean>) => {
    // Here you would implement the actual cookie management based on preferences
    console.log('Applying cookie preferences:', preferences);
  };

  // Save cookie preferences
  const saveCookiePreferences = () => {
    const preferences = {
      analytics: (document.getElementById('cookie-analytics') as HTMLInputElement).checked,
      marketing: (document.getElementById('cookie-marketing') as HTMLInputElement).checked,
      essential: true // Always true
    };

    Cookies.set(COOKIE_PREFERENCES_KEY, JSON.stringify(preferences), 365);
    applyCookiePreferences(preferences);
    hideCookiePreferences();
  };

  // Accept all cookies
  const acceptAllCookies = () => {
    const preferences = {
      analytics: true,
      marketing: true,
      essential: true
    };

    Cookies.set(COOKIE_CONSENT_KEY, 'true', 365);
    Cookies.set(COOKIE_PREFERENCES_KEY, JSON.stringify(preferences), 365);
    applyCookiePreferences(preferences);
    hideCookieConsent();
  };

  // Event Listeners
  document.addEventListener('DOMContentLoaded', () => {
    // Initialize cookie consent
    initCookieConsent();

    // Accept all button
    const acceptButton = document.getElementById('cookie-consent-accept');
    if (acceptButton) {
      acceptButton.addEventListener('click', acceptAllCookies);
    }

    // Customize button
    const customizeButton = document.getElementById('cookie-consent-customize');
    if (customizeButton) {
      customizeButton.addEventListener('click', showCookiePreferences);
    }

    // Close preferences modal
    const closeButton = document.getElementById('cookie-preferences-close');
    if (closeButton) {
      closeButton.addEventListener('click', hideCookiePreferences);
    }

    // Save preferences
    const saveButton = document.getElementById('cookie-preferences-save');
    if (saveButton) {
      saveButton.addEventListener('click', saveCookiePreferences);
    }

    // Close modal when clicking outside
    const modal = document.getElementById('cookie-preferences');
    if (modal) {
      modal.addEventListener('click', (e) => {
        if (e.target === modal) {
          hideCookiePreferences();
        }
      });
    }
  });
</script>

<style>
  /* Animated Checkbox Styling */
  .animated-checkbox-wrapper {
    position: relative;
    display: flex;
    align-items: center;
    height: 20px;
  }

  .animated-checkbox {
    position: absolute;
    opacity: 0;
    width: 20px;
    height: 20px;
    cursor: pointer;
  }

  .animated-checkbox:disabled {
    cursor: not-allowed;
  }

  .checkbox-label {
    cursor: pointer;
    display: flex;
    align-items: center;
  }

  .checkbox-custom {
    width: 20px;
    height: 20px;
    border: 2px solid rgba(243, 230, 248, 0.3);
    border-radius: 6px;
    background: rgba(255, 255, 255, 0.05);
    backdrop-filter: blur(10px);
    display: flex;
    align-items: center;
    justify-content: center;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    position: relative;
    overflow: hidden;
  }

  .checkbox-custom::before {
    content: '';
    position: absolute;
    inset: -1px;
    border-radius: 6px;
    background: linear-gradient(45deg, #6C3EA6, #B57EDC, #0EC2A4);
    background-size: 200% 200%;
    opacity: 0;
    z-index: -1;
    transition: opacity 0.3s ease;
    animation: gradient-shift 3s ease-in-out infinite;
  }

  .checkbox-icon {
    color: transparent;
    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);
    transform: scale(0);
  }

  /* Hover effects */
  .animated-checkbox:not(:disabled):hover ~ .checkbox-label .checkbox-custom {
    border-color: rgba(181, 126, 220, 0.6);
    background: rgba(255, 255, 255, 0.08);
    transform: scale(1.05);
    box-shadow: 0 4px 15px rgba(108, 62, 166, 0.2);
  }

  .animated-checkbox:not(:disabled):hover ~ .checkbox-label .checkbox-custom::before {
    opacity: 0.2;
  }

  /* Checked state */
  .animated-checkbox:checked ~ .checkbox-label .checkbox-custom {
    border-color: #B57EDC;
    background: linear-gradient(135deg, #6C3EA6, #B57EDC);
    transform: scale(1);
  }

  .animated-checkbox:checked ~ .checkbox-label .checkbox-custom::before {
    opacity: 0.5;
  }

  .animated-checkbox:checked ~ .checkbox-label .checkbox-icon {
    color: white;
    transform: scale(1);
  }

  /* Disabled state */
  .animated-checkbox:disabled ~ .checkbox-label .checkbox-custom {
    border-color: rgba(243, 230, 248, 0.5);
    background: linear-gradient(135deg, rgba(108, 62, 166, 0.7), rgba(181, 126, 220, 0.7));
    opacity: 0.8;
  }

  .animated-checkbox:disabled:checked ~ .checkbox-label .checkbox-icon {
    color: rgba(255, 255, 255, 0.8);
    transform: scale(1);
  }

  /* Focus state */
  .animated-checkbox:focus ~ .checkbox-label .checkbox-custom {
    outline: 2px solid rgba(181, 126, 220, 0.5);
    outline-offset: 2px;
  }

  /* Animation keyframes */
  @keyframes gradient-shift {
    0%, 100% {
      background-position: 0% 50%;
    }
    50% {
      background-position: 100% 50%;
    }
  }

  /* Label interaction */
  .checkbox-label:hover .checkbox-custom {
    transform: scale(1.02);
  }

  .animated-checkbox:active ~ .checkbox-label .checkbox-custom {
    transform: scale(0.95);
  }

  .chat-container {
    background: var(--bg-secondary);
    color: var(--text-primary);
    border: 1px solid var(--border-primary);
  }

  .chat-message {
    background: var(--bg-tertiary);
    color: var(--text-primary);
    border-radius: 8px;
    padding: 1rem;
    margin-bottom: 0.5rem;
  }
</style> 