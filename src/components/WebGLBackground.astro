<div id="webgl-container" class="fixed top-0 left-0 w-full h-full -z-10"></div>

<script>
  import * as THREE from 'three';

  // Theme-aware color function
  const getThemeColors = () => {
    const isDark = document.documentElement.getAttribute('data-theme') !== 'light';
    
    if (isDark) {
      return {
        primary: [0.42, 0.24, 0.65],    // Royal Purple
        secondary: [0.71, 0.49, 0.86],  // Electric Lavender
        tertiary: [0.05, 0.76, 0.64]    // Cyber Teal
      };
    } else {
      return {
        primary: [0.23, 0.51, 0.96],    // Blue
        secondary: [0.11, 0.31, 0.85],  // Dark Blue
        tertiary: [0.05, 0.65, 0.91]    // Light Blue
      };
    }
  };

  // Initialize Three.js scene
  const container = document.getElementById('webgl-container');
  if (!container) {
    throw new Error('WebGL container not found');
  }
  
  const scene = new THREE.Scene();
  const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
  const renderer = new THREE.WebGLRenderer({ 
    alpha: true, 
    antialias: true
  });
  
  renderer.setClearColor(0x000000, 0); // Set clear color with 0 alpha
  renderer.setSize(window.innerWidth, window.innerHeight);
  container.appendChild(renderer.domElement);

  // Create particles
  const particlesGeometry = new THREE.BufferGeometry();
  const particleCount = 2000;
  const positions = new Float32Array(particleCount * 3);
  const colors = new Float32Array(particleCount * 3);

  const updateParticleColors = () => {
    const themeColors = getThemeColors();
    
    for (let i = 0; i < particleCount * 3; i += 3) {
      positions[i] = (Math.random() - 0.5) * 10;
      positions[i + 1] = (Math.random() - 0.5) * 10;
      positions[i + 2] = (Math.random() - 0.5) * 10;

      // Randomly choose between theme colors
      const colorSet = [themeColors.primary, themeColors.secondary, themeColors.tertiary][Math.floor(Math.random() * 3)];
      
      colors[i] = colorSet[0] + Math.random() * 0.2;     // R
      colors[i + 1] = colorSet[1] + Math.random() * 0.1; // G
      colors[i + 2] = colorSet[2] + Math.random() * 0.2; // B
    }

    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));
  };

  // Initial color setup
  updateParticleColors();

  const particlesMaterial = new THREE.PointsMaterial({
    size: 0.02,
    vertexColors: true,
    transparent: true,
    opacity: 0.8,
  });

  const particles = new THREE.Points(particlesGeometry, particlesMaterial);
  scene.add(particles);

  camera.position.z = 5;

  // Mouse interaction
  let mouseX = 0;
  let mouseY = 0;
  let targetX = 0;
  let targetY = 0;
  let scrollY = 0;
  let targetScrollY = 0;

  document.addEventListener('mousemove', (event) => {
    mouseX = (event.clientX / window.innerWidth) * 2 - 1;
    mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
  });

  // Add scroll event listener
  window.addEventListener('scroll', () => {
    targetScrollY = window.scrollY * 0.0005; // Adjust multiplier to control scroll sensitivity
  });

  // Theme change observer
  const observer = new MutationObserver((mutations) => {
    mutations.forEach((mutation) => {
      if (mutation.type === 'attributes' && mutation.attributeName === 'data-theme') {
        updateParticleColors();
      }
    });
  });

  observer.observe(document.documentElement, {
    attributes: true,
    attributeFilter: ['data-theme']
  });

  // Animation loop
  function animate() {
    requestAnimationFrame(animate);

    targetX = mouseX * 0.5;
    targetY = mouseY * 0.5;

    // Smooth scroll interpolation
    scrollY += (targetScrollY - scrollY) * 0.05;

    particles.rotation.x += 0.0005;
    particles.rotation.y += 0.0005;

    // Combine mouse and scroll movement
    particles.rotation.x += (targetY - particles.rotation.x + scrollY) * 0.05;
    particles.rotation.y += (targetX - particles.rotation.y) * 0.05;

    renderer.render(scene, camera);
  }

  // Handle window resize
  window.addEventListener('resize', () => {
    camera.aspect = window.innerWidth / window.innerHeight;
    camera.updateProjectionMatrix();
    renderer.setSize(window.innerWidth, window.innerHeight);
  });

  animate();
</script>

<style>
  #webgl-container {
    pointer-events: none;
  }
</style> 