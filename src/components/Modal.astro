---
interface Props {
  id: string;
  title: string;
  subtitle?: string;
}

const { id, title, subtitle } = Astro.props;
const formType = id.split('-')[0]; // contact, consultation, project, or engagement
---

<!-- Add Three.js via CDN -->
<script src="https://cdnjs.cloudflare.com/ajax/libs/three.js/r128/three.min.js"></script>

<div
  id={id}
  class="fixed inset-0 z-50 hidden overflow-y-auto"
  aria-labelledby={`${id}-title`}
  role="dialog"
  aria-modal="true"
  tabindex="-1"
>
  <!-- WebGL Background Canvas -->
  <canvas 
    id={`${id}-canvas`}
    class="fixed inset-0 w-full h-full pointer-events-none"
    aria-hidden="true"
  ></canvas>

  <!-- Background overlay with blur effect -->
  <div 
    class="fixed inset-0 bg-deep-charcoal-900/85 backdrop-blur-xl transition-opacity" 
    aria-hidden="true"
    onclick={`document.getElementById('${id}').classList.add('hidden')`}
  ></div>

  <!-- Modal panel with enhanced interactivity -->
  <div class="flex min-h-full items-end justify-center p-4 text-center sm:items-center sm:p-0">
    <div 
      class="glass-modal relative transform overflow-hidden rounded-xl px-4 pb-4 pt-5 text-left transition-all duration-300 ease-out hover:shadow-royal-purple-500/20 sm:my-8 sm:w-full sm:max-w-lg sm:p-6 group"
      role="document"
      style="transform-style: preserve-3d; perspective: 1000px;"
    >
      <!-- Close button with hover effect and focus styles -->
      <div class="absolute right-0 top-0 pr-4 pt-4">
        <button
          type="button"
          class="glass-button rounded-md text-pale-blush-300 hover:text-royal-purple-600 transition-all duration-200 focus:outline-none focus:ring-2 focus:ring-royal-purple-500 focus:ring-offset-2 transform hover:scale-110 focus:scale-110"
          onclick={`document.getElementById('${id}').classList.add('hidden')`}
          aria-label="Close modal"
          id={`${id}-close-button`}
        >
          <span class="sr-only">Close</span>
          <svg class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke-width="1.5" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <!-- Modal content with parallax effect -->
      <div class="sm:flex sm:items-start transform-gpu transition-transform duration-200">
        <div class="mt-3 text-center sm:mt-0 sm:text-left w-full">
          <h3 
            class="text-2xl font-semibold leading-6 text-neon-coral-500 group-hover:text-pale-blush-50 transition-colors duration-200" 
            id={`${id}-title`}
          >
            {title}
          </h3>
          {subtitle && (
            <div class="mt-2">
              <p class="text-lg text-pale-blush-50 group-hover:text-pale-blush-200 transition-colors duration-200">{subtitle}</p>
            </div>
          )}

          <!-- Feedback elements with enhanced animations -->
          <!-- Loading indicator -->
          <div 
            id={`${id}-loading`} 
            class="hidden mt-4"
            role="status"
            aria-live="polite"
          >
            <div class="flex items-center justify-center">
              <svg class="animate-spin h-5 w-5 text-royal-purple-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
                <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
                <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
              </svg>
              <span class="ml-2 text-pale-blush-100 animate-pulse">Sending your message...</span>
            </div>
          </div>

          <!-- Success message with enhanced animation -->
          <div 
            id={`${id}-success`} 
            class="hidden mt-4 p-4 bg-green-50/90 backdrop-blur-sm text-green-700 rounded-md transform transition-all duration-300 scale-95 opacity-0"
            role="status"
            aria-live="polite"
          >
            <div class="flex items-center">
              <svg class="w-5 h-5 text-green-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M5 13l4 4L19 7"></path>
              </svg>
              <p class="ml-2">Thank you for your message! I will get back to you shortly.</p>
            </div>
          </div>

          <!-- Error message with enhanced animation -->
          <div 
            id={`${id}-error`} 
            class="hidden mt-4 p-4 bg-red-50/90 backdrop-blur-sm text-red-700 rounded-md transform transition-all duration-300 scale-95 opacity-0"
            role="alert"
            aria-live="assertive"
          >
            <div class="flex items-center">
              <svg class="w-5 h-5 text-red-500 flex-shrink-0" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-2.5L13.732 4c-.77-.833-1.964-.833-2.732 0L3.732 16.5c-.77.833.192 2.5 1.732 2.5z"></path>
              </svg>
              <p class="ml-2">Sorry, there was an error sending your message. Please try again or email me directly.</p>
            </div>
          </div>

          <!-- Form content with enhanced interactivity -->
          <div class="mt-6 transform transition-transform duration-200 hover:scale-[1.01]">
            <slot />
          </div>
        </div>
      </div>
    </div>
  </div>
</div>

<style>
  @keyframes shake {
    0%, 100% { transform: translateX(0); }
    25% { transform: translateX(-2px); }
    75% { transform: translateX(2px); }
  }
  .animate-shake {
    animation: shake 0.5s ease-in-out infinite;
  }

  /* Input field animations */
  .form-input, .form-select, .form-textarea {
    @apply transition-all duration-200 ease-out;
    transform-origin: left center;
  }

  .form-input:focus, .form-select:focus, .form-textarea:focus {
    @apply ring-2 ring-purple-500 ring-opacity-50 border-purple-500;
    transform: scale(1.01);
  }

  .form-input:not(:placeholder-shown):valid,
  .form-select:not(:placeholder-shown):valid,
  .form-textarea:not(:placeholder-shown):valid {
    @apply border-green-500 bg-green-50/10;
  }

  .form-input:not(:placeholder-shown):invalid:not(:focus),
  .form-select:not(:placeholder-shown):invalid:not(:focus),
  .form-textarea:not(:placeholder-shown):invalid:not(:focus) {
    @apply border-red-500 bg-red-50/10;
  }

  /* Label animations */
  .form-label {
    @apply transition-all duration-200 ease-out transform origin-left;
  }

  .form-input:focus + .form-label,
  .form-select:focus + .form-label,
  .form-textarea:focus + .form-label,
  .form-input:not(:placeholder-shown) + .form-label,
  .form-select:not(:placeholder-shown) + .form-label,
  .form-textarea:not(:placeholder-shown) + .form-label {
    @apply text-purple-600 scale-90 -translate-y-1;
  }

  /* Character counter animation */
  .char-counter {
    @apply text-sm text-gray-500 transition-all duration-200;
  }

  .char-counter.warning {
    @apply text-yellow-500;
  }

  .char-counter.error {
    @apply text-red-500 animate-pulse;
  }

  /* Focus ring animation */
  @keyframes focusRing {
    0% { box-shadow: 0 0 0 0 rgba(139, 92, 246, 0.4); }
    70% { box-shadow: 0 0 0 6px rgba(139, 92, 246, 0); }
    100% { box-shadow: 0 0 0 0 rgba(139, 92, 246, 0); }
  }

  .form-input:focus, .form-select:focus, .form-textarea:focus {
    animation: focusRing 1.5s ease-out infinite;
  }

  /* Form field container */
  .form-field-container {
    @apply relative mb-4;
  }

  /* Input field base styles */
  .form-input, .form-select, .form-textarea {
    @apply w-full px-4 py-2.5 pr-10 rounded-lg border border-gray-300 bg-white/80 backdrop-blur-sm;
    @apply transition-all duration-200 ease-out;
    transform-origin: left center;
    min-height: 36px;
  }

  .form-textarea {
    @apply min-h-[80px] resize-y;
  }


  /* Character counter positioning - inside input */
  .char-counter {
    @apply absolute right-10 top-1/2 -translate-y-1/2;
    @apply text-[10px] text-gray-400;
    @apply transition-all duration-200;
    pointer-events: none;
  }

  /* Error message - as a tooltip below input */
  .error-message {
    @apply absolute left-0 -bottom-5;
    @apply text-[10px] text-red-500;
    @apply transition-all duration-200;
    @apply opacity-0 transform translate-y-1;
    pointer-events: none;
  }

  .error-message.visible {
    @apply opacity-100 translate-y-0;
  }

  /* Adjust error message for textarea */
  .form-textarea ~ .error-message {
    @apply -bottom-6;
  }

  /* Focus and validation states */
  .form-input:focus, .form-select:focus, .form-textarea:focus {
    @apply ring-1 ring-purple-500 ring-opacity-50 border-purple-500;
    @apply bg-white;
    transform: scale(1.005);
  }

  .form-input:not(:placeholder-shown):valid,
  .form-select:not(:placeholder-shown):valid,
  .form-textarea:not(:placeholder-shown):valid {
    @apply border-green-500 bg-green-50/5;
  }

  .form-input:not(:placeholder-shown):invalid:not(:focus),
  .form-select:not(:placeholder-shown):invalid:not(:focus),
  .form-textarea:not(:placeholder-shown):invalid:not(:focus) {
    @apply border-red-500 bg-red-50/5;
  }

  /* Focus ring animation - more subtle */
  @keyframes focusRing {
    0% { box-shadow: 0 0 0 0 rgba(139, 92, 246, 0.2); }
    70% { box-shadow: 0 0 0 3px rgba(139, 92, 246, 0); }
    100% { box-shadow: 0 0 0 0 rgba(139, 92, 246, 0); }
  }

  .form-input:focus, .form-select:focus, .form-textarea:focus {
    animation: focusRing 1.5s ease-out infinite;
  }

  .form-field-container {
    position: relative;
  }

  .form-input, .form-select, .form-textarea {
    padding-right: 2.5rem; /* pr-10 in Tailwind, enough space for icon */
  }

</style>

<script>
  import { sendEmail } from '../utils/email';
  import { Cookies } from '../utils/cookies';

  // Declare THREE as a global variable
  declare const THREE: any;

  // Three.js particle animation setup
  function initParticleAnimation(modalId: string) {
    const canvas = document.getElementById(`${modalId}-canvas`) as HTMLCanvasElement;
    if (!canvas) return;

    const scene = new THREE.Scene();
    const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
    const renderer = new THREE.WebGLRenderer({ canvas, alpha: true, antialias: true });
    
    renderer.setSize(window.innerWidth, window.innerHeight);
    renderer.setPixelRatio(window.devicePixelRatio);

    // Create particles
    const particlesGeometry = new THREE.BufferGeometry();
    const particleCount = 1000;
    const positions = new Float32Array(particleCount * 3);
    const colors = new Float32Array(particleCount * 3);

    for (let i = 0; i < particleCount * 3; i += 3) {
      positions[i] = (Math.random() - 0.5) * 10;
      positions[i + 1] = (Math.random() - 0.5) * 10;
      positions[i + 2] = (Math.random() - 0.5) * 10;

      colors[i] = Math.random() * 0.5 + 0.5; // Purple-ish
      colors[i + 1] = Math.random() * 0.3;   // Less green
      colors[i + 2] = Math.random() * 0.5 + 0.5; // Purple-ish
    }

    particlesGeometry.setAttribute('position', new THREE.BufferAttribute(positions, 3));
    particlesGeometry.setAttribute('color', new THREE.BufferAttribute(colors, 3));

    const particlesMaterial = new THREE.PointsMaterial({
      size: 0.05,
      vertexColors: true,
      transparent: true,
      opacity: 0.6,
    });

    const particles = new THREE.Points(particlesGeometry, particlesMaterial);
    scene.add(particles);

    camera.position.z = 5;

    // Mouse interaction
    let mouseX = 0;
    let mouseY = 0;
    let targetX = 0;
    let targetY = 0;

    document.addEventListener('mousemove', (event) => {
      mouseX = (event.clientX / window.innerWidth) * 2 - 1;
      mouseY = -(event.clientY / window.innerHeight) * 2 + 1;
    });

    // Animation loop
    function animate() {
      requestAnimationFrame(animate);

      targetX = mouseX * 0.5;
      targetY = mouseY * 0.5;

      particles.rotation.x += 0.001;
      particles.rotation.y += 0.002;

      particles.position.x += (targetX - particles.position.x) * 0.05;
      particles.position.y += (targetY - particles.position.y) * 0.05;

      renderer.render(scene, camera);
    }

    // Handle window resize
    window.addEventListener('resize', () => {
      camera.aspect = window.innerWidth / window.innerHeight;
      camera.updateProjectionMatrix();
      renderer.setSize(window.innerWidth, window.innerHeight);
    });

    animate();
  }

  // Initialize particle animation when modal opens
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (target.matches('[onclick*="classList.remove(\'hidden\')"]')) {
      const modalId = target.getAttribute('onclick')?.match(/getElementById\('([^']+)'\)/)?.[1];
      if (modalId) {
        setTimeout(() => {
          initParticleAnimation(modalId);
        }, 100);
      }
    }
  });

  // Add parallax effect to modal content
  document.addEventListener('mousemove', (e) => {
    const modals = document.querySelectorAll('[role="dialog"]:not(.hidden)');
    modals.forEach((modal) => {
      const modalContent = modal.querySelector('[role="document"]') as HTMLElement;
      if (modalContent) {
        const rect = modalContent.getBoundingClientRect();
        const x = (e.clientX - rect.left) / rect.width - 0.5;
        const y = (e.clientY - rect.top) / rect.height - 0.5;
        
        modalContent.style.transform = `
          perspective(1000px)
          rotateX(${y * -5}deg)
          rotateY(${x * 5}deg)
          translateZ(10px)
        `;
      }
    });
  });

  // Reset transform when mouse leaves modal
  document.addEventListener('mouseleave', (e) => {
    const modals = document.querySelectorAll('[role="dialog"]:not(.hidden)');
    modals.forEach((modal) => {
      const modalContent = modal.querySelector('[role="document"]') as HTMLElement;
      if (modalContent) {
        modalContent.style.transform = 'none';
      }
    });
  });

  // Function to save form state
  const saveFormState = (form: HTMLFormElement) => {
    const formData = new FormData(form);
    const formState: Record<string, string> = {};
    formData.forEach((value, key) => {
      formState[key] = value.toString();
    });
    Cookies.set(`form_${form.id}`, JSON.stringify(formState), 1); // Save for 1 day
  };

  // Function to restore form state
  const restoreFormState = (form: HTMLFormElement) => {
    const savedState = Cookies.get(`form_${form.id}`);
    if (savedState) {
      try {
        const formState = JSON.parse(savedState) as Record<string, string>;
        Object.entries(formState).forEach(([key, value]) => {
          const input = form.querySelector(`[name="${key}"]`) as HTMLInputElement;
          if (input) {
            input.value = value;
          }
        });
      } catch (e) {
        console.error('Error restoring form state:', e);
      }
    }
  };

  // Function to clear form state
  const clearFormState = (form: HTMLFormElement) => {
    Cookies.remove(`form_${form.id}`);
  };

  // Close modal when clicking outside
  document.addEventListener('click', (e) => {
    const modals = document.querySelectorAll('[role="dialog"]');
    modals.forEach((modal) => {
      if (e.target === modal) {
        const form = modal.querySelector('form');
        if (form) {
          saveFormState(form);
        }
        modal.classList.add('hidden');
      }
    });
  });

  // Close modal when pressing Escape
  document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
      const modals = document.querySelectorAll('[role="dialog"]');
      modals.forEach((modal) => {
        const form = modal.querySelector('form');
        if (form) {
          saveFormState(form);
        }
        modal.classList.add('hidden');
      });
    }
  });

  // Restore form state when modal opens
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (target.matches('[onclick*="classList.remove(\'hidden\')"]')) {
      const modalId = target.getAttribute('onclick')?.match(/getElementById\('([^']+)'\)/)?.[1];
      if (modalId) {
        setTimeout(() => {
          const modal = document.getElementById(modalId);
          const form = modal?.querySelector('form');
          if (form) {
            restoreFormState(form);
          }
        }, 100); // Small delay to ensure modal is open
      }
    }
  });

  // Handle form submission
  document.addEventListener('submit', async (e) => {
    const form = e.target as HTMLFormElement;
    if (!form.id?.startsWith('contact-form')) return;

    e.preventDefault();
    const modal = form.closest('[role="dialog"]') as HTMLElement;
    if (!modal) return;

    const loadingEl = modal.querySelector(`#${modal.id}-loading`) as HTMLElement;
    const successEl = modal.querySelector(`#${modal.id}-success`) as HTMLElement;
    const errorEl = modal.querySelector(`#${modal.id}-error`) as HTMLElement;
    const submitButton = form.querySelector('button[type="submit"]') as HTMLButtonElement;
    const errorMessage = errorEl.querySelector('p') as HTMLParagraphElement;

    // Reset form validation
    form.querySelectorAll('.form-input, .form-select, .form-textarea').forEach((input: Element) => {
      input.classList.remove('border-red-500');
      const errorMessage = input.nextElementSibling;
      if (errorMessage?.classList.contains('text-red-500')) {
        errorMessage.remove();
      }
    });

    try {
      // Show loading state and reset feedback states
      loadingEl.classList.remove('hidden');
      successEl.classList.add('hidden');
      successEl.classList.add('scale-95', 'opacity-0');
      successEl.classList.remove('scale-100', 'opacity-100');
      errorEl.classList.add('hidden');
      errorEl.classList.add('scale-95', 'opacity-0');
      errorEl.classList.remove('scale-100', 'opacity-100');
      submitButton.disabled = true;

      const formData = new FormData(form);
      const formType = form.id.split('-')[1] || 'contact';
      
      // Get all form fields
      const data = {
        name: formData.get('name')?.toString() || '',
        email: formData.get('email')?.toString() || '',
        company: formData.get('company')?.toString() || undefined,
        subject: formData.get('subject')?.toString() || 'New Form Submission',
        message: formData.get('message')?.toString() || '',
        formType: formType as 'contact' | 'consultation' | 'project' | 'engagement',
        additionalFields: {} as Record<string, string>
      };

      // Validate required fields
      const requiredFields = ['name', 'email', 'message'];
      const missingFields = requiredFields.filter(field => !data[field as keyof typeof data]);
      
      if (missingFields.length > 0) {
        throw new Error(`Please fill in all required fields: ${missingFields.join(', ')}`);
      }

      // Validate email format
      const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
      if (!emailRegex.test(data.email)) {
        throw new Error('Please enter a valid email address');
      }

      // Add any additional fields based on form type
      if (formType === 'consultation') {
        data.additionalFields = {
          'Consultation Goals': formData.get('message')?.toString() || ''
        };
      } else if (formType === 'project') {
        const timeline = formData.get('timeline')?.toString();
        if (!timeline) {
          throw new Error('Please select an expected timeline');
        }
        data.additionalFields = {
          'Timeline': timeline,
          'Project Requirements': formData.get('message')?.toString() || ''
        };
      } else if (formType === 'engagement') {
        const teamSize = formData.get('team-size')?.toString();
        if (!teamSize) {
          throw new Error('Please select your team size');
        }
        data.additionalFields = {
          'Team Size': teamSize,
          'Engagement Goals': formData.get('message')?.toString() || ''
        };
      }


      await sendEmail(data);

      // Clear form state on successful submission
      clearFormState(form);
      
      // Show success state
      form.reset();
      loadingEl.classList.add('hidden');
      showSuccess(modal);
      
      // Reset AnimatedContactForm labels
      const floatingLabels = form.querySelectorAll('.floating-label') as NodeListOf<HTMLElement>;
      floatingLabels.forEach(label => {
        label.style.opacity = '';
        label.style.transform = '';
        label.style.pointerEvents = '';
      });
      
      // Reset input wrapper states
      const inputWrappers = form.querySelectorAll('.input-wrapper');
      inputWrappers.forEach(wrapper => {
        wrapper.classList.remove('valid', 'invalid');
      });
      
      // Close modal after 3 seconds
      setTimeout(() => {
        modal.classList.add('hidden');
        successEl.classList.add('hidden');
        successEl.classList.add('scale-95', 'opacity-0');
        successEl.classList.remove('scale-100', 'opacity-100');
      }, 3000);
    } catch (error) {
      console.error('Error sending email:', error);
      loadingEl.classList.add('hidden');
      showError(modal);
      
      if (error instanceof Error) {
        errorMessage.textContent = error.message;
        
        // Highlight invalid fields
        if (error.message.includes('required fields')) {
          const fields = error.message.split(': ')[1].split(', ');
          fields.forEach(field => {
            const input = form.querySelector(`[name="${field}"]`) as HTMLElement;
            if (input) {
              input.classList.add('border-red-500');
              const errorDiv = document.createElement('div');
              errorDiv.className = 'text-red-500 text-sm mt-1';
              errorDiv.textContent = `${field.charAt(0).toUpperCase() + field.slice(1)} is required`;
              input.parentNode?.insertBefore(errorDiv, input.nextSibling);
            }
          });
        }
      }
    } finally {
      submitButton.disabled = false;
    }
  });

  // Enhance success/error animations
  function showSuccess(modal: HTMLElement) {
    const successEl = modal.querySelector(`#${modal.id}-success`) as HTMLElement;
    if (successEl) {
      successEl.classList.remove('hidden');
      successEl.classList.remove('scale-95', 'opacity-0');
      successEl.classList.add('scale-100', 'opacity-100');
    }
  }

  function showError(modal: HTMLElement) {
    const errorEl = modal.querySelector(`#${modal.id}-error`) as HTMLElement;
    if (errorEl) {
      errorEl.classList.remove('hidden');
      errorEl.classList.remove('scale-95', 'opacity-0');
      errorEl.classList.add('scale-100', 'opacity-100');
    }
  }

  // Helper functions for SVG icons
  function getCheckIconSVG() {
    return `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" d="M5 13l4 4L19 7"></path>
    </svg>`;
  }
  function getErrorIconSVG() {
    return `<svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
      <path stroke-linecap="round" stroke-linejoin="round" d="M6 18L18 6M6 6l12 12"></path>
    </svg>`;
  }

  // Input validation with animation
  function validateInput(input: HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement) {
    const isValid = input.checkValidity();
    const isDirty = input.value !== '';
    const container = input.closest('.form-field-container');
    
    if (!container) return;
    
    // Remove existing validation classes
    input.classList.remove('border-red-500', 'border-green-500', 'bg-red-50/5', 'bg-green-50/5');
    
    // Remove existing validation icons and messages
    const existingIcons = container.querySelectorAll('.error-message');
    existingIcons.forEach(icon => icon.remove());
    
    if (isDirty) {
      if (isValid) {
        input.classList.add('border-green-500', 'bg-green-50/5');
      } else {
        input.classList.add('border-red-500', 'bg-red-50/5');
  
        // Add error message below input
        const errorMessage = document.createElement('div');
        errorMessage.className = 'error-message';
        errorMessage.textContent = input.validationMessage || 'Required';
        container.appendChild(errorMessage);
        setTimeout(() => errorMessage.classList.add('visible'), 50);
      }
    }
  }

  // Add input field animations and validation
  function setupFormAnimations() {
    const forms = document.querySelectorAll('form');
    forms.forEach(form => {
      // Wrap each input in a container if not already wrapped
      const inputs = form.querySelectorAll('input:not(.form-field-container input), select:not(.form-field-container select), textarea:not(.form-field-container textarea)');
      inputs.forEach(input => {
        if (!input.parentElement?.classList.contains('form-field-container')) {
          const container = document.createElement('div');
          container.className = 'form-field-container';
          input.parentNode?.insertBefore(container, input);
          container.appendChild(input);
        }
      });

      // Setup animations for all inputs
      const allInputs = form.querySelectorAll('.form-field-container input, .form-field-container select, .form-field-container textarea');
      allInputs.forEach(input => {
        // Add floating label effect
        const label = input.previousElementSibling;
        if (label?.classList.contains('form-label')) {
          // Initial state check
          const inputElement = input as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
          if (inputElement.value) {
            label.classList.add('text-purple-600', 'text-xs', '-top-2', 'left-3', 'bg-white');
          }

          input.addEventListener('focus', () => {
            label.classList.add('text-purple-600', 'text-xs', '-top-2', 'left-3', 'bg-white');
          });
          
          input.addEventListener('blur', () => {
            const inputElement = input as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement;
            if (!inputElement.value) {
              label.classList.remove('text-purple-600', 'text-xs', '-top-2', 'left-3', 'bg-white');
            }
          });
        }

        // Add character counter for textareas
        if (input.tagName.toLowerCase() === 'textarea') {
          const maxLength = input.getAttribute('maxlength');
          if (maxLength) {
            const maxLengthNum = parseInt(maxLength, 10);
            const counter = document.createElement('div');
            counter.className = 'char-counter';
            counter.textContent = `0/${maxLengthNum}`;
            input.parentNode?.appendChild(counter);

            input.addEventListener('input', () => {
              const inputElement = input as HTMLTextAreaElement;
              const length = inputElement.value.length;
              counter.textContent = `${length}/${maxLengthNum}`;
              
              counter.classList.remove('warning', 'error');
              if (length > maxLengthNum * 0.8) {
                counter.classList.add('warning');
              }
              if (length > maxLengthNum * 0.95) {
                counter.classList.add('error');
              }
            });
          }
        }

        // Add validation feedback
        input.addEventListener('input', () => {
          validateInput(input as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement);
        });

        input.addEventListener('blur', () => {
          validateInput(input as HTMLInputElement | HTMLTextAreaElement | HTMLSelectElement);
        });
      });
    });
  }

  // Initialize form animations when modal opens
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (target.matches('[onclick*="classList.remove(\'hidden\')"]')) {
      const modalId = target.getAttribute('onclick')?.match(/getElementById\('([^']+)'\)/)?.[1];
      if (modalId) {
        setTimeout(() => {
          setupFormAnimations();
        }, 100);
      }
    }
  });

  // Simple focus management and form initialization - focus first input when modal opens
  document.addEventListener('click', (e) => {
    const target = e.target as HTMLElement;
    if (target.matches('[onclick*="classList.remove(\'hidden\')"]')) {
      const modalId = target.getAttribute('onclick')?.match(/getElementById\('([^']+)'\)/)?.[1];
      if (modalId) {
        setTimeout(() => {
          const modal = document.getElementById(modalId);
          if (modal) {
            // Focus first input
            const firstInput = modal.querySelector('input, textarea, select') as HTMLElement;
            if (firstInput) {
              firstInput.focus();
            }
            
            // Trigger AnimatedContactForm initialization if needed
            const animatedForms = modal.querySelectorAll('.animated-form-container form');
            animatedForms.forEach(form => {
              // Dispatch a custom event to reinitialize the form if needed
              form.dispatchEvent(new CustomEvent('modal-opened'));
            });
          }
        }, 150);
      }
    }
  });
</script> 