---
interface Props {
	centerTitle: string;
	centerSubtitle?: string;
	middleRingTitle: string;
	sections: ProcessSection[];
	size?: 'sm' | 'md' | 'lg';
	theme?: 'blue' | 'purple' | 'teal';
}

interface ProcessSection {
	number: number;
	title: string;
	description: string;
}

const {
	centerTitle,
	centerSubtitle = '',
	middleRingTitle,
	sections,
	size = 'lg',
	theme = 'blue'
} = Astro.props;

const sizeClasses = {
	sm: 'w-80 h-80',
	md: 'w-96 h-96', 
	lg: 'w-[32rem] h-[32rem]'
};
---

<div class={`process-cycle-container relative ${sizeClasses[size]} mx-auto`}>
	<!-- Floating particles background -->
	<div class="absolute inset-0 pointer-events-none overflow-hidden rounded-full">
		<div class="floating-particle particle-1"></div>
		<div class="floating-particle particle-2"></div>
		<div class="floating-particle particle-3"></div>
		<div class="floating-particle particle-4"></div>
	</div>

	<!-- Center Circle -->
	<div class="absolute-center">
		<div class={`center-circle ${theme}`}>
			<div class="center-content">
				<h3 class="center-title">{centerTitle}</h3>
				{centerSubtitle && <p class="center-subtitle">{centerSubtitle}</p>}
			</div>
			<div class="center-glow"></div>
		</div>
	</div>

	<!-- Middle Ring -->
	<div class="absolute-center">
		<div class={`middle-ring ${theme}`}>
			<div class="ring-text">
				{middleRingTitle}
			</div>
		</div>
	</div>

	<!-- Process Sections -->
	{sections.map((section, index) => {
		const angle = (360 / sections.length) * index - 90; // Start from top
		const radianAngle = (angle * Math.PI) / 180;
		const radius = 200; // Distance from center
		const x = Math.cos(radianAngle) * radius;
		const y = Math.sin(radianAngle) * radius;
		
		return (
			<div 
				class="absolute process-section"
				style={`
					left: 50%; 
					top: 50%; 
					transform: translate(calc(-50% + ${x}px), calc(-50% + ${y}px));
				`}
			>
				<div class={`section-card ${theme} group`}>
					<div class="section-number">{section.number}</div>
					<h4 class="section-title">{section.title}</h4>
					{/* <p class="section-description">{section.description}</p> */}
					<div class="section-glow"></div>
				</div>
			</div>
		);
	})}

	<!-- Connecting Arrows -->
	<svg class="absolute inset-0 w-full h-full pointer-events-none" viewBox="0 0 512 512">
		<defs>
			<marker id="arrowhead-blue" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
				<polygon points="0 0, 10 3.5, 0 7" fill="#2563eb" opacity="0.8" />
			</marker>
			<marker id="arrowhead-purple" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
				<polygon points="0 0, 10 3.5, 0 7" fill="#7c3aed" opacity="0.8" />
			</marker>
			<marker id="arrowhead-teal" markerWidth="10" markerHeight="7" refX="9" refY="3.5" orient="auto">
				<polygon points="0 0, 10 3.5, 0 7" fill="#0d9488" opacity="0.8" />
			</marker>
		</defs>
		
		{sections.map((_, index) => {
			const startAngle = (360 / sections.length) * index - 90;
			const endAngle = (360 / sections.length) * ((index + 1) % sections.length) - 90;
			const radius = 170; // Slightly closer to center for better alignment
			const centerX = 256;
			const centerY = 256;
			
			// Calculate connection points closer to section centers
			const startX = centerX + radius * Math.cos((startAngle + 15) * Math.PI / 180);
			const startY = centerY + radius * Math.sin((startAngle + 15) * Math.PI / 180);
			const endX = centerX + radius * Math.cos((endAngle - 15) * Math.PI / 180);
			const endY = centerY + radius * Math.sin((endAngle - 15) * Math.PI / 180);
			
			// Create curved path with better control point
			const midAngle = (startAngle + endAngle) / 2;
			if (Math.abs(endAngle - startAngle) > 180) {
				// Handle wrap-around case
				const adjustedMidAngle = ((startAngle + endAngle + 360) / 2) % 360;
				const controlRadius = radius + 50;
				const controlX = centerX + controlRadius * Math.cos(adjustedMidAngle * Math.PI / 180);
				const controlY = centerY + controlRadius * Math.sin(adjustedMidAngle * Math.PI / 180);
				
				return (
					<path
						d={`M ${startX} ${startY} Q ${controlX} ${controlY} ${endX} ${endY}`}
						stroke={theme === 'blue' ? '#2563eb' : theme === 'purple' ? '#7c3aed' : '#0d9488'}
						stroke-width="2"
						fill="none"
						opacity="0.6"
						marker-end={`url(#arrowhead-${theme})`}
						class="connection-arrow"
					/>
				);
			} else {
				const controlRadius = radius + 35;
				const controlX = centerX + controlRadius * Math.cos(midAngle * Math.PI / 180);
				const controlY = centerY + controlRadius * Math.sin(midAngle * Math.PI / 180);
				
				return (
					<path
						d={`M ${startX} ${startY} Q ${controlX} ${controlY} ${endX} ${endY}`}
						stroke={theme === 'blue' ? '#2563eb' : theme === 'purple' ? '#7c3aed' : '#0d9488'}
						stroke-width="2"
						fill="none"
						opacity="0.6"
						marker-end={`url(#arrowhead-${theme})`}
						class="connection-arrow"
					/>
				);
			}
		})}
	</svg>
</div>

<style>
	.process-cycle-container {
		position: relative;
		margin: 2rem auto;
	}

	.absolute-center {
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
	}

	/* Floating particles */
	.floating-particle {
		position: absolute;
		width: 8px;
		height: 8px;
		background: radial-gradient(circle, rgba(108, 62, 166, 0.6), rgba(181, 126, 220, 0.3));
		border-radius: 50%;
		animation: float-particles 8s ease-in-out infinite;
	}

	.particle-1 { top: 15%; left: 20%; animation-delay: 0s; }
	.particle-2 { top: 25%; right: 15%; animation-delay: 2s; }
	.particle-3 { bottom: 20%; left: 25%; animation-delay: 4s; }
	.particle-4 { bottom: 30%; right: 20%; animation-delay: 6s; }

	/* Center Circle */
	.center-circle {
		width: 120px;
		height: 120px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		position: relative;
		backdrop-filter: blur(20px);
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
		box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2);
	}

	.center-circle.blue {
		background: radial-gradient(circle at 30% 30%, 
			rgba(37, 99, 235, 0.4) 0%, 
			rgba(37, 99, 235, 0.2) 50%, 
			rgba(37, 99, 235, 0.1) 100%);
		border: 3px solid rgba(37, 99, 235, 0.5);
	}

	.center-circle.purple {
		background: radial-gradient(circle at 30% 30%, 
			rgba(108, 62, 166, 0.4) 0%, 
			rgba(108, 62, 166, 0.2) 50%, 
			rgba(108, 62, 166, 0.1) 100%);
		border: 3px solid rgba(108, 62, 166, 0.5);
	}

	.center-circle.teal {
		background: radial-gradient(circle at 30% 30%, 
			rgba(13, 148, 136, 0.4) 0%, 
			rgba(13, 148, 136, 0.2) 50%, 
			rgba(13, 148, 136, 0.1) 100%);
		border: 3px solid rgba(13, 148, 136, 0.5);
	}

	.center-content {
		text-align: center;
		z-index: 2;
		position: relative;
	}

	.center-title {
		font-size: 0.9rem;
		font-weight: 700;
		color: #F3E6F8;
		text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
		line-height: 1.2;
		margin-bottom: 0.25rem;
		text-align: center;
		hyphens: auto;
		word-wrap: break-word;
		padding: 0 0.2rem;
	}

	.center-subtitle {
		font-size: 0.7rem;
		color: rgba(243, 230, 248, 0.8);
		font-weight: 500;
		text-align: center;
		line-height: 1.2;
	}

	.center-glow {
		position: absolute;
		inset: -20px;
		border-radius: 50%;
		opacity: 0.5;
		animation: pulse-glow 3s ease-in-out infinite;
	}

	.center-circle.blue .center-glow {
		background: radial-gradient(circle, transparent 40%, rgba(37, 99, 235, 0.2) 70%);
	}

	.center-circle.purple .center-glow {
		background: radial-gradient(circle, transparent 40%, rgba(108, 62, 166, 0.2) 70%);
	}

	.center-circle.teal .center-glow {
		background: radial-gradient(circle, transparent 40%, rgba(13, 148, 136, 0.2) 70%);
	}

	/* Middle Ring */
	.middle-ring {
		width: 200px;
		height: 200px;
		border-radius: 50%;
		display: flex;
		align-items: center;
		justify-content: center;
		position: relative;
		backdrop-filter: blur(10px);
	}

	.middle-ring.blue {
		background: conic-gradient(from 0deg, 
			rgba(37, 99, 235, 0.2) 0deg,
			rgba(59, 130, 246, 0.1) 90deg,
			rgba(37, 99, 235, 0.2) 180deg,
			rgba(59, 130, 246, 0.1) 270deg,
			rgba(37, 99, 235, 0.2) 360deg);
		border: 2px solid rgba(37, 99, 235, 0.3);
	}

	.middle-ring.purple {
		background: conic-gradient(from 0deg, 
			rgba(108, 62, 166, 0.2) 0deg,
			rgba(124, 58, 237, 0.1) 90deg,
			rgba(108, 62, 166, 0.2) 180deg,
			rgba(124, 58, 237, 0.1) 270deg,
			rgba(108, 62, 166, 0.2) 360deg);
		border: 2px solid rgba(108, 62, 166, 0.3);
	}

	.middle-ring.teal {
		background: conic-gradient(from 0deg, 
			rgba(13, 148, 136, 0.2) 0deg,
			rgba(20, 184, 166, 0.1) 90deg,
			rgba(13, 148, 136, 0.2) 180deg,
			rgba(20, 184, 166, 0.1) 270deg,
			rgba(13, 148, 136, 0.2) 360deg);
		border: 2px solid rgba(13, 148, 136, 0.3);
	}

	.ring-text {
		font-size: 0.75rem;
		font-weight: 600;
		color: #F3E6F8;
		text-align: center;
		text-transform: uppercase;
		letter-spacing: 0.1em;
		text-shadow: 0 2px 4px rgba(0, 0, 0, 0.3);
		line-height: 1.2;
		padding: 0 1rem;
	}

	/* Process Sections */
	.process-section {
		z-index: 10;
	}

	.section-card {
		width: 140px;
		height: 120px;
		border-radius: 16px;
		padding: 1rem;
		text-align: center;
		position: relative;
		backdrop-filter: blur(15px);
		transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
		cursor: pointer;
		box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
		overflow: hidden;
		display: flex;
		flex-direction: column;
		align-items: center;
		justify-content: center;
	}

	.section-card.blue {
		background: linear-gradient(135deg, 
			rgba(37, 99, 235, 0.3) 0%, 
			rgba(59, 130, 246, 0.2) 50%, 
			rgba(37, 99, 235, 0.15) 100%);
		border: 2px solid rgba(37, 99, 235, 0.4);
	}

	.section-card.purple {
		background: linear-gradient(135deg, 
			rgba(108, 62, 166, 0.3) 0%, 
			rgba(124, 58, 237, 0.2) 50%, 
			rgba(108, 62, 166, 0.15) 100%);
		border: 2px solid rgba(108, 62, 166, 0.4);
	}

	.section-card.teal {
		background: linear-gradient(135deg, 
			rgba(13, 148, 136, 0.3) 0%, 
			rgba(20, 184, 166, 0.2) 50%, 
			rgba(13, 148, 136, 0.15) 100%);
		border: 2px solid rgba(13, 148, 136, 0.4);
	}

	.section-card:hover {
		transform: scale(1.05) translateY(-4px);
		box-shadow: 0 12px 40px rgba(0, 0, 0, 0.2);
	}

	.section-card.blue:hover {
		border-color: rgba(37, 99, 235, 0.6);
		box-shadow: 0 12px 40px rgba(37, 99, 235, 0.3);
	}

	.section-card.purple:hover {
		border-color: rgba(108, 62, 166, 0.6);
		box-shadow: 0 12px 40px rgba(108, 62, 166, 0.3);
	}

	.section-card.teal:hover {
		border-color: rgba(13, 148, 136, 0.6);
		box-shadow: 0 12px 40px rgba(13, 148, 136, 0.3);
	}

	.section-number {
		display: inline-flex;
		align-items: center;
		justify-content: center;
		width: 28px;
		height: 28px;
		border-radius: 50%;
		font-size: 0.875rem;
		font-weight: 700;
		color: white;
		margin-bottom: 0.5rem;
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.5);
		flex-shrink: 0;
	}

	.section-card.blue .section-number {
		background: linear-gradient(135deg, #2563eb, #3b82f6);
	}

	.section-card.purple .section-number {
		background: linear-gradient(135deg, #6c3ea6, #7c3aed);
	}

	.section-card.teal .section-number {
		background: linear-gradient(135deg, #0d9488, #14b8a6);
	}

	.section-title {
		font-size: 0.85rem;
		font-weight: 600;
		color: #F3E6F8;
		margin-bottom: 0.4rem;
		line-height: 1.2;
		text-shadow: 0 1px 2px rgba(0, 0, 0, 0.3);
		text-align: center;
		hyphens: auto;
		word-wrap: break-word;
		max-width: 100%;
	}

	.section-description {
		font-size: 0.7rem;
		color: rgba(243, 230, 248, 0.9);
		line-height: 1.4;
		font-weight: 500;
		text-align: center;
		hyphens: auto;
		word-wrap: break-word;
		overflow-wrap: break-word;
		flex-grow: 1;
		display: flex;
		align-items: center;
		justify-content: center;
		max-width: 100%;
		padding: 0 0.2rem;
	}

	.section-glow {
		position: absolute;
		inset: -10px;
		border-radius: 20px;
		opacity: 0;
		transition: opacity 0.4s ease;
		pointer-events: none;
	}

	.section-card.blue:hover .section-glow {
		opacity: 0.4;
		background: radial-gradient(circle, transparent 40%, rgba(37, 99, 235, 0.3) 70%);
	}

	.section-card.purple:hover .section-glow {
		opacity: 0.4;
		background: radial-gradient(circle, transparent 40%, rgba(108, 62, 166, 0.3) 70%);
	}

	.section-card.teal:hover .section-glow {
		opacity: 0.4;
		background: radial-gradient(circle, transparent 40%, rgba(13, 148, 136, 0.3) 70%);
	}

	/* Connection Arrows */
	.connection-arrow {
		transition: all 0.4s ease;
		stroke-dasharray: 200;
		stroke-dashoffset: 200;
		animation: draw-arrow 3s ease-out forwards;
	}

	.connection-arrow:nth-child(1) { animation-delay: 0.5s; }
	.connection-arrow:nth-child(2) { animation-delay: 1s; }
	.connection-arrow:nth-child(3) { animation-delay: 1.5s; }
	.connection-arrow:nth-child(4) { animation-delay: 2s; }
	.connection-arrow:nth-child(5) { animation-delay: 2.5s; }
	.connection-arrow:nth-child(6) { animation-delay: 3s; }

	/* Responsive Design */
	@media (max-width: 768px) {
		.process-cycle-container {
			width: 90vw !important;
			height: 90vw !important;
			max-width: 420px;
			max-height: 420px;
		}

		.center-circle {
			width: 100px;
			height: 100px;
		}

		.center-title {
			font-size: 0.8rem;
			line-height: 1.1;
		}

		.center-subtitle {
			font-size: 0.6rem;
		}

		.middle-ring {
			width: 160px;
			height: 160px;
		}

		.ring-text {
			font-size: 0.65rem;
			padding: 0 0.75rem;
			line-height: 1.2;
		}

		.section-card {
			width: 130px;
			height: 110px;
			padding: 0.8rem;
		}

		.section-title {
			font-size: 0.75rem;
			margin-bottom: 0.3rem;
			line-height: 1.1;
		}

		.section-description {
			font-size: 0.65rem;
			line-height: 1.3;
			padding: 0 0.15rem;
		}

		.section-number {
			width: 24px;
			height: 24px;
			font-size: 0.75rem;
			margin-bottom: 0.4rem;
		}
	}

	@media (max-width: 640px) {
		.process-cycle-container {
			width: 95vw !important;
			height: 95vw !important;
			max-width: 380px;
			max-height: 380px;
		}

		.center-circle {
			width: 85px;
			height: 85px;
		}

		.center-title {
			font-size: 0.75rem;
			line-height: 1.1;
		}

		.middle-ring {
			width: 145px;
			height: 145px;
		}

		.ring-text {
			font-size: 0.62rem;
			padding: 0 0.5rem;
			line-height: 1.1;
		}

		.section-card {
			width: 115px;
			height: 95px;
			padding: 0.7rem;
		}

		.section-title {
			font-size: 0.7rem;
			margin-bottom: 0.25rem;
			line-height: 1.1;
		}

		.section-description {
			font-size: 0.58rem;
			line-height: 1.25;
			padding: 0 0.1rem;
		}

		.section-number {
			width: 22px;
			height: 22px;
			font-size: 0.7rem;
			margin-bottom: 0.3rem;
		}
	}

	/* Extra small mobile devices */
	@media (max-width: 480px) {
		.process-cycle-container {
			width: 98vw !important;
			height: 98vw !important;
			max-width: 320px;
			max-height: 320px;
		}

		.center-circle {
			width: 70px;
			height: 70px;
		}

		.center-title {
			font-size: 0.65rem;
			line-height: 1.0;
		}

		.middle-ring {
			width: 120px;
			height: 120px;
		}

		.ring-text {
			font-size: 0.55rem;
			padding: 0 0.4rem;
			line-height: 1.0;
		}

		.section-card {
			width: 95px;
			height: 80px;
			padding: 0.5rem;
		}

		.section-title {
			font-size: 0.6rem;
			margin-bottom: 0.2rem;
			line-height: 1.0;
		}

		.section-description {
			font-size: 0.5rem;
			line-height: 1.2;
			padding: 0 0.05rem;
		}

		.section-number {
			width: 18px;
			height: 18px;
			font-size: 0.6rem;
			margin-bottom: 0.25rem;
		}
	}

	/* Animations */
	@keyframes float-particles {
		0%, 100% { 
			transform: translateY(0px) rotate(0deg);
			opacity: 0.6;
		}
		50% { 
			transform: translateY(-15px) rotate(180deg);
			opacity: 1;
		}
	}

	@keyframes pulse-glow {
		0%, 100% {
			opacity: 0.5;
			transform: scale(1);
		}
		50% {
			opacity: 0.8;
			transform: scale(1.1);
		}
	}

	@keyframes draw-arrow {
		to {
			stroke-dashoffset: 0;
		}
	}
</style> 