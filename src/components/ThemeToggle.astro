---
// Theme toggle component
---

<button
  id="theme-toggle"
  class="theme-toggle-btn"
  aria-label="Toggle theme"
  title="Toggle theme"
>
  <span class="icon-wrapper">
    <!-- Sun icon for light mode -->
    <svg
      class="sun-icon"
      width="20"
      height="20"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <circle cx="12" cy="12" r="5"></circle>
      <line x1="12" y1="1" x2="12" y2="3"></line>
      <line x1="12" y1="21" x2="12" y2="23"></line>
      <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
      <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
      <line x1="1" y1="12" x2="3" y2="12"></line>
      <line x1="21" y1="12" x2="23" y2="12"></line>
      <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
      <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
    </svg>

    <!-- Moon icon for dark mode -->
    <svg
      class="moon-icon"
      width="20"
      height="20"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
    </svg>
  </span>
</button>

<style>
  .theme-toggle-btn {
    @apply relative inline-flex items-center justify-center w-10 h-10 rounded-lg transition-all duration-300;
    background: var(--bg-secondary);
    border: 1px solid var(--border-primary);
    color: var(--text-secondary);
    cursor: pointer;
    touch-action: manipulation;
    -webkit-tap-highlight-color: transparent;
    user-select: none;
    /* Ensure it's above other elements */
    position: relative;
    z-index: 100;
  }

  .theme-toggle-btn:hover {
    background: var(--bg-tertiary);
    color: var(--text-primary);
    transform: scale(1.05);
  }

  .theme-toggle-btn:focus {
    outline: none;
    box-shadow: 0 0 0 3px var(--accent-tertiary);
  }

  .theme-toggle-btn:active {
    transform: scale(0.95);
    background: var(--bg-tertiary);
  }

  /* Mobile-specific styles */
  @media (hover: none) and (pointer: coarse) {
    .theme-toggle-btn {
      min-height: 48px;
      min-width: 48px;
      touch-action: manipulation;
      -webkit-tap-highlight-color: transparent;
      /* Ensure it's always on top on mobile */
      position: relative !important;
      z-index: 9999 !important;
      /* Ensure it's always interactive */
      pointer-events: auto !important;
      /* Better tap target */
      padding: 4px;
    }
    
    .theme-toggle-btn:hover {
      transform: none;
      background: var(--bg-secondary);
    }
    
    .theme-toggle-btn:active {
      transform: scale(0.9);
      background: var(--accent-primary) !important;
      color: white !important;
      border-color: var(--accent-primary) !important;
    }
  }

  /* Additional mobile optimizations */
  @media (max-width: 768px) {
    .theme-toggle-btn {
      min-height: 48px;
      min-width: 48px;
      touch-action: manipulation;
      -webkit-tap-highlight-color: transparent;
      -webkit-user-select: none;
      user-select: none;
      /* Prevent text selection on mobile */
      -webkit-touch-callout: none;
      /* Remove callout on iOS */
      -webkit-user-drag: none;
      /* Prevent dragging */
    }
  }

  /* Remove tap highlights on mobile */
  .theme-toggle-btn {
    -webkit-tap-highlight-color: rgba(0, 0, 0, 0);
    -webkit-touch-callout: none;
    -webkit-user-select: none;
    -khtml-user-select: none;
    -moz-user-select: none;
    -ms-user-select: none;
    user-select: none;
  }

  /* Visual feedback for touch */
  .theme-toggle-btn:active {
    transition: transform 0.1s ease;
  }

  .icon-wrapper {
    position: relative;
    width: 20px;
    height: 20px;
    display: inline-block;
  }

  .sun-icon,
  .moon-icon {
    position: absolute;
    top: 0;
    left: 0;
    width: 20px;
    height: 20px;
    transition: all 0.3s;
    pointer-events: none;
  }

  /* Light theme: show sun icon */
  :root[data-theme="light"] .sun-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  :root[data-theme="light"] .moon-icon {
    opacity: 0;
    transform: rotate(-90deg) scale(0.5);
  }

  /* Dark theme: show moon icon */
  :root[data-theme="dark"] .sun-icon {
    opacity: 0;
    transform: rotate(90deg) scale(0.5);
  }

  :root[data-theme="dark"] .moon-icon {
    opacity: 1;
    transform: rotate(0deg) scale(1);
  }

  /* Hover effects */
  .theme-toggle-btn:hover .sun-icon,
  .theme-toggle-btn:hover .moon-icon {
    transform: scale(1.1);
  }
</style>

<script>
  // Simple and reliable theme toggle function
  function toggleTheme() {
    try {
      const currentTheme = localStorage.getItem('theme') || 'dark';
      const newTheme = currentTheme === 'dark' ? 'light' : 'dark';
      
      // Apply theme immediately
      document.documentElement.setAttribute('data-theme', newTheme);
      localStorage.setItem('theme', newTheme);
      
      // Update meta theme-color
      const metaThemeColor = document.querySelector('meta[name="theme-color"]');
      if (metaThemeColor) {
        metaThemeColor.setAttribute('content', newTheme === 'dark' ? '#1E1E1E' : '#ffffff');
      }
      
      console.log('Theme toggled to:', newTheme);
      
      // Add visual feedback
      const toggleBtn = document.getElementById('theme-toggle');
      if (toggleBtn) {
        toggleBtn.style.transform = 'scale(0.9)';
        toggleBtn.style.background = newTheme === 'dark' ? '#6C3EA6' : '#3b82f6';
        setTimeout(() => {
          toggleBtn.style.transform = '';
          toggleBtn.style.background = '';
        }, 200);
      }
    } catch (error) {
      console.error('Error toggling theme:', error);
    }
  }

  // Initialize theme on page load
  function initTheme() {
    try {
      const savedTheme = localStorage.getItem('theme') || 'dark';
      document.documentElement.setAttribute('data-theme', savedTheme);
      
      // Update meta theme-color
      const metaThemeColor = document.querySelector('meta[name="theme-color"]');
      if (metaThemeColor) {
        metaThemeColor.setAttribute('content', savedTheme === 'dark' ? '#1E1E1E' : '#ffffff');
      }
    } catch (error) {
      console.error('Error initializing theme:', error);
    }
  }

  // Attach event listeners with better mobile support
  function attachEventListeners() {
    const toggleBtn = document.getElementById('theme-toggle');
    if (!toggleBtn) {
      // Retry if button not found yet
      setTimeout(attachEventListeners, 100);
      return;
    }

    // Clear any existing listeners
    const newToggleBtn = toggleBtn.cloneNode(true);
    toggleBtn.parentNode?.replaceChild(newToggleBtn, toggleBtn);
    const btn = document.getElementById('theme-toggle');
    if (!btn) return;
    
    // Detect if we're on a touch device
    const isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;
    
    if (isTouchDevice) {
      // Mobile/touch devices: use touch events only
      let touchStarted = false;
      let touchMoved = false;
      
      const handleTouchStart = (e: TouchEvent) => {
        touchStarted = true;
        touchMoved = false;
        btn.style.transform = 'scale(0.95)';
        e.preventDefault();
      };
      
      const handleTouchMove = (e: TouchEvent) => {
        touchMoved = true;
        btn.style.transform = '';
      };
      
      const handleTouchEnd = (e: TouchEvent) => {
        if (touchStarted && !touchMoved) {
          e.preventDefault();
          e.stopPropagation();
          toggleTheme();
          console.log('Theme toggled via touch');
        }
        touchStarted = false;
        touchMoved = false;
        btn.style.transform = '';
      };
      
      btn.addEventListener('touchstart', handleTouchStart, { passive: false });
      btn.addEventListener('touchmove', handleTouchMove, { passive: false });
      btn.addEventListener('touchend', handleTouchEnd, { passive: false });
      btn.addEventListener('touchcancel', handleTouchEnd, { passive: false });
      
    } else {
      // Desktop: use click events
      const handleClick = (e: Event) => {
        e.preventDefault();
        e.stopPropagation();
        toggleTheme();
        console.log('Theme toggled via click');
      };
      
      btn.addEventListener('click', handleClick);
    }
    
    console.log('Theme toggle event listeners attached successfully');
  }

  // Initialize everything
  function init() {
    initTheme();
    attachEventListeners();
  }

  // Run initialization immediately if DOM is ready, otherwise wait
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', init);
  } else {
    init();
  }

  // Listen for system theme changes (optional enhancement)
  if (window.matchMedia) {
    const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
    mediaQuery.addEventListener('change', (e) => {
      // Only auto-switch if user hasn't manually set a preference
      if (!localStorage.getItem('theme')) {
        const newTheme = e.matches ? 'dark' : 'light';
        document.documentElement.setAttribute('data-theme', newTheme);
        
        const metaThemeColor = document.querySelector('meta[name="theme-color"]');
        if (metaThemeColor) {
          metaThemeColor.setAttribute('content', newTheme === 'dark' ? '#1E1E1E' : '#ffffff');
        }
      }
    });
  }
</script> 