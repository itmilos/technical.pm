---
import { themes, type Theme, getTheme } from '../utils/theme';

const themeIcons = {
  light: `<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
  </svg>`,
  dark: `<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
  </svg>`,
  purple: `<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
    <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
  </svg>`
} as const;

const themeDescriptions = {
  light: "Clean and professional",
  dark: "Easy on the eyes",
  purple: "Unique and vibrant"
} as const;

const currentTheme = getTheme();
---

<div class="relative inline-block text-left">
  <button
    type="button"
    id="theme-menu-button"
    class="inline-flex items-center gap-x-1.5 rounded-md px-3 py-2 text-sm font-semibold shadow-sm ring-1 ring-inset ring-gray-300 hover:bg-gray-50 dark:ring-gray-700 dark:hover:bg-gray-800"
    aria-expanded="false"
    aria-haspopup="true"
  >
    <span class="theme-icon" set:html={themeIcons[getTheme()]} />
    <span class="hidden sm:inline">Theme</span>
    <svg class="-mr-1 h-5 w-5 text-gray-400" viewBox="0 0 20 20" fill="currentColor" aria-hidden="true">
      <path fill-rule="evenodd" d="M5.23 7.21a.75.75 0 011.06.02L10 11.168l3.71-3.938a.75.75 0 111.08 1.04l-4.25 4.5a.75.75 0 01-1.08 0l-4.25-4.5a.75.75 0 01.02-1.06z" clip-rule="evenodd" />
    </svg>
  </button>

  <div
    id="theme-menu"
    class="absolute right-0 z-10 mt-2 w-72 origin-top-right rounded-md bg-white shadow-lg ring-1 ring-black ring-opacity-5 focus:outline-none dark:bg-gray-800 hidden"
    role="menu"
    aria-orientation="vertical"
    aria-labelledby="theme-menu-button"
    tabindex="-1"
  >
    <div class="py-2" role="none">
      {themes.map((theme) => (
        <button
          type="button"
          class="theme-option w-full px-4 py-3 text-sm hover:bg-gray-100 dark:hover:bg-gray-700 flex items-center gap-3 group"
          data-theme={theme}
          role="menuitem"
          tabindex="-1"
        >
          <div class="flex-shrink-0 w-8 h-8 rounded-lg overflow-hidden ring-1 ring-gray-200 dark:ring-gray-700">
            <div class="w-full h-full grid grid-cols-2 grid-rows-2">
              <div class="bg-[rgb(var(--background))]"></div>
              <div class="bg-[rgb(var(--primary))]"></div>
              <div class="bg-[rgb(var(--secondary))]"></div>
              <div class="bg-[rgb(var(--accent))]"></div>
            </div>
          </div>
          <div class="flex-1 min-w-0">
            <div class="flex items-center gap-2">
              <span class="theme-icon" set:html={themeIcons[theme]} />
              <span class="font-medium">{theme.charAt(0).toUpperCase() + theme.slice(1)}</span>
            </div>
            <p class="text-xs text-gray-500 dark:text-gray-400 mt-0.5">{themeDescriptions[theme]}</p>
          </div>
          <div class="flex-shrink-0">
            <svg class="w-5 h-5 text-purple-600 dark:text-purple-400 opacity-0 group-hover:opacity-100 transition-opacity" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 5l7 7-7 7" />
            </svg>
          </div>
        </button>
      ))}
    </div>
  </div>
</div>

<script>
  import { getTheme, setTheme, type Theme } from '../utils/theme';

  function initThemeSwitcher() {
    const menuButton = document.getElementById('theme-menu-button');
    const menu = document.getElementById('theme-menu');
    const themeOptions = document.querySelectorAll('.theme-option');
    const themeIcons = document.querySelectorAll('.theme-icon');

    // Set initial theme
    const currentTheme = getTheme();
    document.documentElement.setAttribute('data-theme', currentTheme);
    updateThemeIcon(currentTheme);

    // Toggle menu
    menuButton?.addEventListener('click', () => {
      const expanded = menuButton.getAttribute('aria-expanded') === 'true';
      menuButton.setAttribute('aria-expanded', (!expanded).toString());
      menu?.classList.toggle('hidden');
    });

    // Close menu when clicking outside
    document.addEventListener('click', (event) => {
      if (!menuButton?.contains(event.target as Node) && !menu?.contains(event.target as Node)) {
        menuButton?.setAttribute('aria-expanded', 'false');
        menu?.classList.add('hidden');
      }
    });

    // Handle theme selection
    themeOptions.forEach((option) => {
      option.addEventListener('click', () => {
        const theme = (option as HTMLElement).dataset.theme as Theme;
        setTheme(theme);
        updateThemeIcon(theme);
        menuButton?.setAttribute('aria-expanded', 'false');
        menu?.classList.add('hidden');
      });
    });

    function updateThemeIcon(theme: Theme) {
      const icons = {
        light: `<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 3v1m0 16v1m9-9h-1M4 12H3m15.364 6.364l-.707-.707M6.343 6.343l-.707-.707m12.728 0l-.707.707M6.343 17.657l-.707.707M16 12a4 4 0 11-8 0 4 4 0 018 0z" />
        </svg>`,
        dark: `<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M20.354 15.354A9 9 0 018.646 3.646 9.003 9.003 0 0012 21a9.003 9.003 0 008.354-5.646z" />
        </svg>`,
        purple: `<svg class="w-5 h-5" fill="none" viewBox="0 0 24 24" stroke="currentColor">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 21a4 4 0 01-4-4V5a2 2 0 012-2h4a2 2 0 012 2v12a4 4 0 01-4 4zm0 0h12a2 2 0 002-2v-4a2 2 0 00-2-2h-2.343M11 7.343l1.657-1.657a2 2 0 012.828 0l2.829 2.829a2 2 0 010 2.828l-8.486 8.485M7 17h.01" />
        </svg>`
      };
      
      const buttonIcon = menuButton?.querySelector('.theme-icon');
      if (buttonIcon) {
        buttonIcon.innerHTML = icons[theme];
      }
    }
  }

  // Initialize on page load
  document.addEventListener('DOMContentLoaded', initThemeSwitcher);
</script>

<style>
  /* Theme-specific styles */
  :root {
    --light-background: #ffffff;
    --light-text: #111827;
    --light-primary: #9333ea;
    --light-secondary: #f3f4f6;

    --dark-background: #111827;
    --dark-text: #f9fafb;
    --dark-primary: #a855f7;
    --dark-secondary: #1f2937;

    --purple-background: #faf5ff;
    --purple-text: #581c87;
    --purple-primary: #7e22ce;
    --purple-secondary: #f3e8ff;
  }

  /* Default theme (light) */
  :root {
    --theme-background: var(--light-background);
    --theme-text: var(--light-text);
    --theme-primary: var(--light-primary);
    --theme-secondary: var(--light-secondary);
  }

  /* Dark theme */
  [data-theme="dark"] {
    --theme-background: var(--dark-background);
    --theme-text: var(--dark-text);
    --theme-primary: var(--dark-primary);
    --theme-secondary: var(--dark-secondary);
  }

  /* Purple theme */
  [data-theme="purple"] {
    --theme-background: var(--purple-background);
    --theme-text: var(--purple-text);
    --theme-primary: var(--purple-primary);
    --theme-secondary: var(--purple-secondary);
  }

  /* Theme preview grid */
  .theme-preview {
    @apply grid grid-cols-2 grid-rows-2 w-8 h-8 rounded-lg overflow-hidden ring-1 ring-gray-200 dark:ring-gray-700;
  }

  /* Theme option hover effect */
  .theme-option {
    @apply transition-colors duration-200;
  }

  .theme-option:hover {
    @apply bg-gray-50 dark:bg-gray-700/50;
  }

  /* Theme icon colors */
  .theme-icon {
    @apply text-gray-600 dark:text-gray-300;
  }

  [data-theme="light"] .theme-icon {
    @apply text-yellow-500;
  }

  [data-theme="dark"] .theme-icon {
    @apply text-blue-400;
  }

  [data-theme="purple"] .theme-icon {
    @apply text-purple-500;
  }
</style> 