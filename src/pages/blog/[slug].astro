---
import BlogPost from '../../components/BlogPost.astro';
import { getCollection } from 'astro:content';
import type { CollectionEntry } from 'astro:content';

// Define comment type
interface Comment {
  author: string;
  authorImage: string;
  content: string;
  date: string;
}

// Enable server-side rendering for this page
export const prerender = true;

// Generate static paths for existing posts
export async function getStaticPaths() {
  const posts = await getCollection('blog');
  return posts.map((post) => ({
    params: { slug: post.slug },
    props: { post },
  }));
}

// Get the post data
const { post } = Astro.props;

// Handle 404 for non-existent posts
if (!post) {
  return Astro.redirect('/404');
}

// Get the rendered content
const { Content } = await post.render();

// Calculate reading time (assuming average reading speed of 200 words per minute)
const wordCount = post.body.split(/\s+/).length;
const readingTime = Math.ceil(wordCount / 200);

// Get the post image, defaulting to the first image in the content if available
const postImage = post.data.image || (() => {
  const imageMatch = post.body.match(/!\[.*?\]\((.*?)\)/);
  return imageMatch ? imageMatch[1] : '/seo/og-image.png';
})();

// Get related posts based on tags
const relatedPosts = await getCollection('blog', (entry) => {
  // Exclude current post and find posts with matching tags
  return entry.slug !== post.slug && 
         entry.data.tags.some(tag => post.data.tags.includes(tag));
}).then(posts => 
  // Sort by date and take the 3 most recent
  posts.sort((a, b) => new Date(b.data.date).getTime() - new Date(a.data.date).getTime())
       .slice(0, 3)
);

// Get post views (you can implement this with your preferred analytics solution)
// This is a placeholder that you can replace with actual analytics
const postViews = 0; // TODO: Implement actual view counting

// Get post comments (you can implement this with your preferred commenting system)
// This is a placeholder that you can replace with actual comments
const comments: Comment[] = []; // TODO: Implement actual comments
---

<BlogPost
  title={post.data.title}
  description={post.data.description}
  date={post.data.date}
  author={post.data.author}
  authorBio={post.data.authorBio}
  authorImage={post.data.authorImage}
  tags={post.data.tags}
  content={post.body}
  rawContent={post.body}
  readingTime={readingTime}
  lastModified={post.data.lastModified}
  image={postImage}
>
  <Content />

  <!-- Related Posts Section -->
  {relatedPosts.length > 0 && (
    <section class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
      <h2 class="text-2xl font-bold mb-6">Related Posts</h2>
      <div class="grid gap-6 md:grid-cols-3">
        {relatedPosts.map((relatedPost) => (
          <a 
            href={`/blog/${relatedPost.slug}`}
            class="block p-4 bg-gray-50 dark:bg-gray-800 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-700 transition-colors"
          >
            <h3 class="font-semibold mb-2">{relatedPost.data.title}</h3>
            <p class="text-sm text-gray-600 dark:text-gray-400 mb-2">
              {relatedPost.data.description.slice(0, 100)}...
            </p>
            <time class="text-sm text-gray-500 dark:text-gray-500">
              {new Date(relatedPost.data.date).toLocaleDateString('en-US', {
                year: 'numeric',
                month: 'long',
                day: 'numeric'
              })}
            </time>
          </a>
        ))}
      </div>
    </section>
  )}

  <!-- Post Stats -->
  <div class="mt-8 pt-8 border-t border-gray-200 dark:border-gray-700">
    <div class="flex items-center justify-between text-sm text-gray-600 dark:text-gray-400">
      <div class="flex items-center gap-4">
        <span>{postViews} views</span>
        <span>â€¢</span>
        <span>{readingTime} min read</span>
      </div>
      <div class="flex items-center gap-2">
        <button
          id="like-button"
          class="flex items-center gap-1 px-3 py-1 rounded-full bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z" />
          </svg>
          <span>Like</span>
        </button>
        <button
          id="share-button"
          class="flex items-center gap-1 px-3 py-1 rounded-full bg-gray-100 dark:bg-gray-800 hover:bg-gray-200 dark:hover:bg-gray-700 transition-colors"
        >
          <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M8.684 13.342C8.886 12.938 9 12.482 9 12c0-.482-.114-.938-.316-1.342m0 2.684a3 3 0 110-2.684m0 2.684l6.632 3.316m-6.632-6l6.632-3.316m0 0a3 3 0 105.367-2.684 3 3 0 00-5.367 2.684zm0 9.316a3 3 0 105.368 2.684 3 3 0 00-5.368-2.684z" />
          </svg>
          <span>Share</span>
        </button>
      </div>
    </div>
  </div>

  <!-- Comments Section (Placeholder) -->
  <section class="mt-12 pt-8 border-t border-gray-200 dark:border-gray-700">
    <h2 class="text-2xl font-bold mb-6">Comments</h2>
    {comments.length > 0 ? (
      <div class="space-y-6">
        {comments.map((comment) => (
          <div class="p-4 bg-gray-50 dark:bg-gray-800 rounded-lg">
            <div class="flex items-center gap-3 mb-2">
              <img 
                src={comment.authorImage} 
                alt={comment.author}
                class="w-8 h-8 rounded-full"
              />
              <div>
                <h3 class="font-semibold">{comment.author}</h3>
                <time class="text-sm text-gray-500">
                  {new Date(comment.date).toLocaleDateString()}
                </time>
              </div>
            </div>
            <p class="text-gray-700 dark:text-gray-300">{comment.content}</p>
          </div>
        ))}
      </div>
    ) : (
      <p class="text-gray-600 dark:text-gray-400">
        Be the first to comment on this post!
      </p>
    )}
  </section>
</BlogPost>

<script>
  // Like button functionality
  const likeButton = document.getElementById('like-button');
  likeButton?.addEventListener('click', async () => {
    // TODO: Implement like functionality
    console.log('Like clicked');
  });

  // Share button functionality
  const shareButton = document.getElementById('share-button');
  shareButton?.addEventListener('click', async () => {
    if (navigator.share) {
      try {
        const description = document.querySelector('meta[name="description"]')?.getAttribute('content') || '';
        await navigator.share({
          title: document.title,
          text: description,
          url: window.location.href,
        });
      } catch (err) {
        console.error('Error sharing:', err);
      }
    } else {
      // Fallback for browsers that don't support the Web Share API
      const url = window.location.href;
      await navigator.clipboard.writeText(url);
      alert('Link copied to clipboard!');
    }
  });
</script> 